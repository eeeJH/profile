// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$btn-next-name: 'btn-next';
$btn-next-x: 0px;
$btn-next-y: 280px;
$btn-next-offset-x: 0px;
$btn-next-offset-y: -280px;
$btn-next-width: 18px;
$btn-next-height: 30px;
$btn-next-total-width: 360px;
$btn-next-total-height: 310px;
$btn-next-image: '../img/sprites/sp_icon.png';
$btn-next: (0px, 280px, 0px, -280px, 18px, 30px, 360px, 310px, '../img/sprites/sp_icon.png', 'btn-next', );
$btn-prev-name: 'btn-prev';
$btn-prev-x: 28px;
$btn-prev-y: 280px;
$btn-prev-offset-x: -28px;
$btn-prev-offset-y: -280px;
$btn-prev-width: 18px;
$btn-prev-height: 30px;
$btn-prev-total-width: 360px;
$btn-prev-total-height: 310px;
$btn-prev-image: '../img/sprites/sp_icon.png';
$btn-prev: (28px, 280px, -28px, -280px, 18px, 30px, 360px, 310px, '../img/sprites/sp_icon.png', 'btn-prev', );
$git-icon1-name: 'git_icon1';
$git-icon1-x: 280px;
$git-icon1-y: 0px;
$git-icon1-offset-x: -280px;
$git-icon1-offset-y: 0px;
$git-icon1-width: 80px;
$git-icon1-height: 80px;
$git-icon1-total-width: 360px;
$git-icon1-total-height: 310px;
$git-icon1-image: '../img/sprites/sp_icon.png';
$git-icon1: (280px, 0px, -280px, 0px, 80px, 80px, 360px, 310px, '../img/sprites/sp_icon.png', 'git_icon1', );
$git-icon2-name: 'git_icon2';
$git-icon2-x: 280px;
$git-icon2-y: 90px;
$git-icon2-offset-x: -280px;
$git-icon2-offset-y: -90px;
$git-icon2-width: 80px;
$git-icon2-height: 80px;
$git-icon2-total-width: 360px;
$git-icon2-total-height: 310px;
$git-icon2-image: '../img/sprites/sp_icon.png';
$git-icon2: (280px, 90px, -280px, -90px, 80px, 80px, 360px, 310px, '../img/sprites/sp_icon.png', 'git_icon2', );
$git-icon3-name: 'git_icon3';
$git-icon3-x: 280px;
$git-icon3-y: 180px;
$git-icon3-offset-x: -280px;
$git-icon3-offset-y: -180px;
$git-icon3-width: 80px;
$git-icon3-height: 80px;
$git-icon3-total-width: 360px;
$git-icon3-total-height: 310px;
$git-icon3-image: '../img/sprites/sp_icon.png';
$git-icon3: (280px, 180px, -280px, -180px, 80px, 80px, 360px, 310px, '../img/sprites/sp_icon.png', 'git_icon3', );
$kmou-logo-name: 'kmou_logo';
$kmou-logo-x: 0px;
$kmou-logo-y: 0px;
$kmou-logo-offset-x: 0px;
$kmou-logo-offset-y: 0px;
$kmou-logo-width: 270px;
$kmou-logo-height: 270px;
$kmou-logo-total-width: 360px;
$kmou-logo-total-height: 310px;
$kmou-logo-image: '../img/sprites/sp_icon.png';
$kmou-logo: (0px, 0px, 0px, 0px, 270px, 270px, 360px, 310px, '../img/sprites/sp_icon.png', 'kmou_logo', );
$spritesheet-width: 360px;
$spritesheet-height: 310px;
$spritesheet-image: '../img/sprites/sp_icon.png';
$spritesheet-sprites: ($btn-next, $btn-prev, $git-icon1, $git-icon2, $git-icon3, $kmou-logo, );
$spritesheet: (360px, 310px, '../img/sprites/sp_icon.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
